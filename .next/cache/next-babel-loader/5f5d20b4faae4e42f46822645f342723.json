{"ast":null,"code":"var _jsxFileName = \"/Users/sandy/Desktop/next-movie-omdb/lib/Context.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nexport const Context = React.createContext();\nconst links = [{\n  name: \"movie\",\n  icon: \"film\"\n}, {\n  name: \"serie\",\n  icon: \"tv\"\n}, {\n  name: \"episode\",\n  icon: \"file-video\"\n}];\n\nconst ContextProvider = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    query: \"\",\n    links: links,\n    active: links[0]\n  });\n\n  const setActive = link => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      active: link\n    }));\n  };\n\n  const setQuery = input => {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      query: input\n    }));\n  };\n\n  const value = React.useMemo(() => {\n    return {\n      state,\n      setActive,\n      setQuery\n    };\n  }, [state.query, state.active]);\n  return __jsx(Context.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }, props.children);\n};\n\nexport default ContextProvider;","map":{"version":3,"sources":["/Users/sandy/Desktop/next-movie-omdb/lib/Context.js"],"names":["React","useState","Context","createContext","links","name","icon","ContextProvider","props","state","setState","query","active","setActive","link","setQuery","input","value","useMemo","children"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,MAAMC,OAAO,GAAGF,KAAK,CAACG,aAAN,EAAhB;AACP,MAAMC,KAAK,GAAG,CACZ;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CADY,EAEZ;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAFY,EAGZ;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAHY,CAAd;;AAKA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC;AACjCU,IAAAA,KAAK,EAAE,EAD0B;AAEjCP,IAAAA,KAAK,EAAEA,KAF0B;AAGjCQ,IAAAA,MAAM,EAAER,KAAK,CAAC,CAAD;AAHoB,GAAD,CAAlC;;AAKA,QAAMS,SAAS,GAAIC,IAAD,IAAU;AAC1BJ,IAAAA,QAAQ,iCAAMD,KAAN;AAAaG,MAAAA,MAAM,EAAEE;AAArB,OAAR;AACD,GAFD;;AAGA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BN,IAAAA,QAAQ,iCAAMD,KAAN;AAAaE,MAAAA,KAAK,EAAEK;AAApB,OAAR;AACD,GAFD;;AAGA,QAAMC,KAAK,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AAChC,WAAO;AACLT,MAAAA,KADK;AAELI,MAAAA,SAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD,GANa,EAMX,CAACN,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,MAApB,CANW,CAAd;AAOA,SAAO,MAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEK,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCT,KAAK,CAACW,QAAvC,CAAP;AACD,CApBD;;AAsBA,eAAeZ,eAAf","sourcesContent":["import React, { useState } from \"react\";\n\nexport const Context = React.createContext();\nconst links = [\n  { name: \"movie\", icon: \"film\" },\n  { name: \"serie\", icon: \"tv\" },\n  { name: \"episode\", icon: \"file-video\" },\n];\nconst ContextProvider = (props) => {\n  const [state, setState] = useState({\n    query: \"\",\n    links: links,\n    active: links[0],\n  });\n  const setActive = (link) => {\n    setState({ ...state, active: link });\n  };\n  const setQuery = (input) => {\n    setState({ ...state, query: input });\n  };\n  const value = React.useMemo(() => {\n    return {\n      state,\n      setActive,\n      setQuery,\n    };\n  }, [state.query, state.active]);\n  return <Context.Provider value={value}>{props.children}</Context.Provider>;\n};\n\nexport default ContextProvider;\n"]},"metadata":{},"sourceType":"module"}